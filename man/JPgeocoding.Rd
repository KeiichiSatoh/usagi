% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/JPgeocoding.R
\name{JPgeocoding}
\alias{JPgeocoding}
\title{Geocode Japanese addresses using geocoding.jp API}
\usage{
JPgeocoding(
  address,
  encoding = "UTF-8",
  sleep_sec = 10,
  return_as_sf = FALSE,
  with_address = FALSE
)
}
\arguments{
\item{address}{A character vector of address strings in Japanese.}

\item{encoding}{Character string indicating the encoding to use for the address when constructing the URL. Default is \code{"UTF-8"}.}

\item{sleep_sec}{Number of seconds to wait between API requests to avoid overloading the server. Default is \code{10}. Values under 10 will trigger a warning.}

\item{return_as_sf}{Logical. If \code{TRUE}, the result is returned as an \code{sf} object with WGS84 coordinates (\code{EPSG:4326}). Default is \code{FALSE}.}

\item{with_address}{Logical. If \code{TRUE}, the original address strings are included in the output. Default is \code{FALSE}.}
}
\value{
A \code{data.frame} with columns \code{"lng"} and \code{"lat"} (and optionally \code{"address"}), or an \code{sf} object with point geometry if \code{return_as_sf = TRUE}.
Addresses that fail to resolve will result in rows with \code{NA} values.
}
\description{
This function retrieves geographic coordinates (longitude and latitude)
for a vector of Japanese addresses by querying the public geocoding API at \url{https://www.geocoding.jp}.
The result can be returned as a \code{data.frame} or as an \code{sf} object.
}
\details{
This function accesses a public API service that may have rate limits or temporary downtime.
It is strongly recommended to keep at least 10 seconds between requests (\code{sleep_sec >= 10}) to avoid being blocked.
}
\note{
This function depends on the availability of \url{https://www.geocoding.jp} and requires the packages \code{xml2} and \code{sf}.
}
\examples{
\dontrun{
addresses <- c("東京都国立市中2-1", "京都府京都市左京区吉田本町")

# Get coordinates as data.frame
df <- JPgeocoding(addresses, with_address = TRUE)

# Get coordinates as sf object
sf_result <- JPgeocoding(addresses, return_as_sf = TRUE, with_address = TRUE)
library(mapview)
mapview::mapview(sf_result)
}
}
